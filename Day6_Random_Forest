import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score

# 从网络端加载数据
dataset_url = 'http://mlr.cs.umass.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'
data = pd.read_csv(dataset_url, sep=';') # 指定分割符';' 因为原文件每个数值用;隔开的

y = data['quality'] # 也可以写成 y = data.quality
X = data.drop('quality', axis=1)

# 不均衡数据需要用到 stratify=标签列y 意思是控制每个类在训练集和测试集的比例
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123, stratify=y)

# Pipeline 函数可以把多个“处理数据的节点”按顺序打包在一起，数据在前一个节点处理之后的结果，转到下一个节点处理
pipeline = make_pipeline(StandardScaler(), RandomForestRegressor(n_estimators=100))

# 设置参数搜寻范围,因为后面要用到网格搜索
hyperparameters = {'randomforestregressor__max_features':['auto','sqrt','log2'], 'randomforestregressor__max_depth':[None, 5, 3, 1]}

# 交叉验证训练模型
clf = GridSearchCV(pipeline, hyperparameters, cv=10)
clf.fit(X_train, y_train)

# 预测
y_pred = clf.predict(X_test)
r2 = r2_score(y_test, y_pred)
Mse = mean_squared_error(y_test, y_pred)

